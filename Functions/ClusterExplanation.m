function ClusterExplanation(folder, saveDir,names, ControlPos)
% This function determines the activity values obtained from the clustering
% and draws scree plots to explain 


%required functions
    %dir2 by P Henriques and M Ghosh

    %Inputs:
    %folder - directory containing the .mat files generated by
    %sleepAnalysis by J.Rihel
    
    %saveDir - directory into which the figures and spreadsheet should be
    %saved
    
    %names - names of each of the conditions (ie the genotypes/ drug doses)
    
    %cmap - colormap to use for figures
    
    %list the files to load
    files =dir2(folder);
    
    nConditions = size(names,2);
    
    %load the workspaces
    %now load the .mat files - top file is .DS_store hidden file
    %sleepStructure = struct([]);
    for i = 1:size(files,1)
        sleepStructure(i) = load(fullfile(folder, files(i).name));   
    end
    
    %find the lightboundries in each experiment
    LB= NaN(7,size(sleepStructure,2));
    for i =1:size(sleepStructure,2)
        LB(1:length(find(sleepStructure(i).geno.lightboundries)),i) = find(sleepStructure(i).geno.lightboundries);
    end
    
    %sort day and night data
    wake_day = cell(size(LB,2), nConditions);
    wake_night = cell(size(LB,2), nConditions);
    for e = 1:size(sleepStructure,2)    
        for j = 1:nConditions %genotypes group
            wake_day{e,j}(:,:,1) = sleepStructure(e).geno.avewaking{j}(LB(3,e):LB(4,e),:); %day 5 from LB matrix
            wake_day {e,j} (:,:,2) = sleepStructure(e).geno.avewaking{j}(LB(5,e):LB(6,e),:); %day 6
            wake_night {e,j} (:,:,1) = sleepStructure(e).geno.avewaking{j}(LB(2,e):LB(3,e),:); %night 5
            wake_night {e,j} (:,:,2) = sleepStructure(e).geno.avewaking{j}(LB(4,e):LB(5,e),:); %night 6
        end
    end
    clear e i j
    
   
    %find then number of fish in each experiment and condition
    nFish = NaN(size(wake_day));
    for e =1:size(sleepStructure,2)
        for g = 1:size(wake_day,2)
            nFish (e,g) = size(wake_day{e,g},2);
        end
    end
    
     %flip groups if WT is not group 3
    if ControlPos ~= 1
        names = fliplr(names)
        wake_day = fliplr(wake_day)
        wake_night= fliplr (wake_night)
        nFish = fliplr(nFish)
    end
     % filter set so that any minute with <0.1 sec min^-1 activity is counted as
    % inactivity
        %filter the waking activity values
    for e=1:size(sleepStructure,2)
        for g = 1:size(sleepStructure(e).geno.data,2)
                wake_day{e,g}(wake_day{e,g} <=0.1) = NaN;
                wake_night{e,g}(wake_night{e,g} <=0.1) = NaN;
        end
    end
    clear e g
    
    %make a copy
    wake_day2 = wake_day;
    wake_night2 = wake_night;

    %% first scale the data

    %for every experiment and genotype and fish scale the activity by
      %its own maximum
      %preallocate cell arrays
    maximumsf = cell(2, size(files,1));
    wake_day_scaled = cell(size(wake_day));
    wake_night_scaled = cell(size(wake_night));
        
    for e=1:size(wake_day2,1) %every experiment

       for g=1:size(wake_day2,2) %every genotype
           maximumsf{e,g} = NaN(max(nFish(e,:)),size(nFish,2), size(wake_day{e,g},3));
            for d=1:size(wake_day2{e,g},3) %every day and night
                for f=1:size(wake_day2{e,g},2) %for every fish
                    maximumsf{1,e}(f,g,d) = max(wake_day2{e,g}(:,f,d)); %day

                    maximumsf{2,e}(f,g,d)=max(wake_night2{e,g}(:,f,d)); %night
                end
            end

            for d=1:size(wake_day2{e,g},3)

                for f=1:size(wake_day2{e,g},2)

                        %now scale the wake_night and day values for every day and night

                    wake_day_scaled{e,g}(:,f,d)=wake_day2{e,g}(:,f,d)/...
                       maximumsf{1,e}(f,g,d);

                        wake_night_scaled{e,g}(:,f,d) = wake_night2{e,g}(:,f,d)./...
                    maximumsf{2,e}(f,g,d);

                end
            end
        end
     end

    %% determine how many clusters to partition wake states into

    %partition days and nights into separate cell arrays
    wake_night_clusters = cell(wake_night_scaled);
    wake_day_clusters = cell(wake_day_scaled);
    for e=1:size(sleepStructure,2)
        for g=1:size(sleepStructure(e).geno.data,2)
            for d=1:size(wake_day{e,g},3)
                wake_night_clusters {e,g,d} = wake_night_scaled{e,g}(:,:,d);%only night 1
                wake_day_clusters{e,g,d} = wake_day_scaled{e,g}(:,:,d);

            end
            wake_night_clusters {e,g,3} = vertcat(wake_night_clusters{e,g,1},...
                wake_night_clusters{e,g,2});
            wake_day_clusters{e,g,3} = vertcat(wake_day_clusters{e,g,1}, ...
                wake_day_clusters{e,g,2});
        end
    end


    %determine the number of clusters required - this is lifted from
        %best_kmeans function (external)
    % preallocate matrices and arrays
    distortion = nan(10,1);
    distortionPercent = cell(size(sleepStructure,2), size(wake_day_clusters,3)); %distortion
    r = cell(size(sleepStructure,2), size(wake_day_clusters,3)); %cumvar cutoff
    KD = NaN (size(sleepStructure,2), size(wake_day_clusters,3)); %K means cut off
    
    K = NaN(2,1); %matrix to decide number of clusters
    
    %day first
    for e=1:size(sleepStructure,2) %for every experiment

        for d= 1:size(wake_day_clusters,3) %every day and night separately and combined
            
            X = vertcat(wake_day_clusters{e,1,d}(:), wake_day_clusters{e,2,d}(:),...
                wake_day_clusters{e,3,d}(:)); %input wake data
            
            for i=1:10 %try 10 clusters for each experiment - this can be changed

                [~,~, SUMD] = kmeans(X,i, 'emptyaction', 'drop'); %calculate K-means

                distortion (i)= nansum (SUMD); %calculate sum of squares

             end

            variance=distortion(1:end-1)-distortion(2:end); %subtract the sum of squares for each cluster number

            distortionPercent{e,d}=cumsum(variance)/(distortion(1)-distortion(end)); %calculate as a percentage of total residuals

            r{e,d} = find(distortionPercent{e,d}>0.9); %find point at which over 90% of data is explain by fewest number of clusters 

            KD(e,d)=r{e,d}(1)+1; 
        clear X variance SUMD 
        end
    end
     
    K(1)=max(KD(:)); %day time K

    %make the day and night figure
    figure;
    shadedErrorBar_2(1:size(distortionPercent{1,1},1)+1, [0; nanmean(cell2mat(distortionPercent(:,3)'),2)],...
        [0; nanstd(cell2mat(distortionPercent(:,3)'),[],2)], 'b')
    hold on
    stem(K(1)+1,1,'color', 'b', 'linewidth', 2)
    box off;
    ylim ([0, 1])
    ylabel ('Variance Explained', 'FontSize', 16);
    xlabel ('Number of Clusters', 'FontSize', 16);
    legend({strcat('Daytime, N = ', num2str(size(distortionPercent,1)))}, 'FontSize', 14)
    print(gcf, fullfile(saveDir, 'KDayClusters'), '-depsc');
    savefig(gcf, fullfile(saveDir, 'KDayClusters.fig'));
    saveas(gcf, fullfile(saveDir, 'KDayClusters'), 'tiff');
    
    %same for night
    distortion = nan(10,1);
    distortionPercent = cell(size(sleepStructure,2), size(wake_night_clusters,3)); %distortion
    r = cell(size(sleepStructure,2), size(wake_night_clusters,3)); %cumvar cutoff
    KN = NaN (size(sleepStructure,2), size(wake_night_clusters,3)); %K means cut off
    
    %determine number of clusters
     for e=1:size(sleepStructure,2) %for every experiment

        for d= 1:size(wake_night_clusters,3) %every day and night separately and combined

            X = vertcat(wake_night_clusters{e,1,d}(:), wake_night_clusters{e,2,d}(:),...
                wake_night_clusters{e,3,d}(:)); %input wake data
            
            for i=1:10 %try 10 clusters for each experiment - this can be changed

                [~,~, SUMD] = kmeans(X,i, 'emptyaction', 'drop', 'Replicates', 10); %calculate K-means

                distortion (i)= nansum (SUMD); %calculate cost function for each K

             end

            variance=distortion(1:end-1)-distortion(2:end); %subtract the sum of squares for each cluster number

            distortionPercent{e,d}=cumsum(variance)/(distortion(1)-distortion(end)); %calculate as a percentage of total residuals

            r{e,d} = find(distortionPercent{e,d}>0.9); %find point at which over 90% of data is explain by fewest number of clusters 

            KN(e,d)=r{e,d}(1)+1; 
        clear X variance SUMD 
       end
    end
     
    K(2)=max(KN(:)); %night time K
    
    %make the day and night figure
    figure;
    shadedErrorBar_2(1:size(distortionPercent{1,1},1)+1, [0; nanmean(cell2mat(distortionPercent(:,3)'),2)],...
        [0; nanstd(cell2mat(distortionPercent(:,3)'),[],2)], 'k')
    hold on
    stem(K(2)+1,1,'color', 'k', 'linewidth', 2)
    box off;
    ylim ([0, 1])
    ylabel ('Variance Explained', 'FontSize', 16);
    xlabel ('Number of Clusters', 'FontSize', 16);
    legend({strcat('Daytime, N = ', num2str(size(distortionPercent,1)))}, 'FontSize', 14)
    print(gcf, fullfile(saveDir, 'KNightClusters'), '-depsc');
    savefig(gcf, fullfile(saveDir, 'KNightClusters.fig'));
    saveas(gcf, fullfile(saveDir, 'KNightClusters'), 'tiff');
   
    clear r
    
    %% Now actually do the Kmeans clustering using the number of clusters decided
    
    %preallocate arrays
    clusterTemp = cell(size(sleepStructure,2), size(wake_day_clusters,3));
    clusterSort = cell(size(sleepStructure,2), size(wake_day_clusters,3));
    IDX_D = cell(size(sleepStructure,2), size(wake_day_clusters,3));
    C_D= cell(size(sleepStructure,2), size(wake_day_clusters,3));
    SUMD_D = cell(size(sleepStructure,2), size(wake_day_clusters,3));
    ClusterRefsD = cell(size(sleepStructure,2), size(wake_day_clusters,3));
    
    for e=1:size(sleepStructure,2)
    
        for d=1:size(wake_day_clusters,3) %single and grouped data
        
            %vertically concatenate and then sort data
            clusterTemp{e,d} = [];
            clusterSort{e,d} = [];
        
            for g = 1:size(wake_day_clusters,2) %every group
            
                clusterTemp2 = wake_day_clusters{e,g,d}(:);
                clusterTemp{e,d} = [clusterTemp{e,d}; clusterTemp2]; %add on
            
                %make a reference vector
                clusterSort2(1:size(clusterTemp2,1),1) = g;
                clusterSort{e,d} = [clusterSort{e,d}; clusterSort2];
         
                clear clusterTemp2 clusterSort2
            end
         
            %now do k-means clustering
            [IDX_D{e,d}, C_D{e,d},SUMD_D{e,d}] = kmeans (clusterTemp{e,d},K(1)); %sort into four clusters

    
            % sort out the output data by logical indexing
            for g=1:size(names,2) %every group
        
                fish = clusterSort{e,d} ==g; %make an index for the fish
        
                ClusterRefsD{e,g,d} = IDX_D{e,d}(fish); % index out the fish
        
                ClusterRefsD{e,g,d} = reshape(ClusterRefsD{e,g,d},[],...
                size(wake_day_clusters{e,g,d},2)); %reshape by the number of time points
        
                clear fish
            end
        end
    end
    clear clusterTemp clusterSort e g d

    %% and for Night
    %preallocate arrays
    clusterTemp = cell(size(sleepStructure,2), size(wake_night_clusters,3));
    clusterSort = cell(size(sleepStructure,2), size(wake_night_clusters,3));
    IDX_N = cell(size(sleepStructure,2), size(wake_night_clusters,3));
    C_N= cell(size(sleepStructure,2), size(wake_night_clusters,3));
    SUMD_N = cell(size(sleepStructure,2), size(wake_night_clusters,3));
    ClusterRefsN = cell(size(sleepStructure,2), size(wake_night_clusters,3));
    
    for e=1:size(sleepStructure,2)
    
        for d=1:size(wake_night_clusters,3) %single and grouped data
        
            %vertically concatenate and then sort data
            clusterTemp{e,d} = [];
            clusterSort{e,d} = [];
        
            for g = 1:size(wake_night_clusters,2) %every group
            
                clusterTemp2 = wake_night_clusters{e,g,d}(:);
                clusterTemp{e,d} = [clusterTemp{e,d}; clusterTemp2]; %add on
            
                %make a reference vector
                clusterSort2(1:size(clusterTemp2,1),1) = g;
                clusterSort{e,d} = [clusterSort{e,d}; clusterSort2];
         
                clear clusterTemp2 clusterSort2
            end
         
            %now do k-means clustering
            [IDX_N{e,d}, C_N{e,d},SUMD_N{e,d}] = kmeans (clusterTemp{e,d},K(2)); %sort into four clusters

    
            % sort out the output data by logical indexing
            for g=1:size(names,2) %every group
        
                fish = clusterSort{e,d} ==g; %make an index for the fish
        
                ClusterRefsN{e,g,d} = IDX_N{e,d}(fish); % index out the fish
        
                ClusterRefsN{e,g,d} = reshape(ClusterRefsN{e,g,d},[],...
                    size(wake_night_clusters{e,g,d},2)); %reshape by the number of time points
        
                clear fish
            end
        end
    end
    clear clusterTemp clusterSort e g d
    
    %sort cluster centroids
    %now plot the clustering centroids for day and night to see how similar
        %it is between experiments
        %will sort data and use the sort indices in the next section
    IX_D = cell(size(sleepStructure,2), size(ClusterRefsD, 3));
    O_D = cell(size(sleepStructure,2), size(ClusterRefsD,3));
    
    for d=1:size(wake_day_clusters,3)
        for e=1:size(sleepStructure,2)
            %sort data
            [IX_D{e,d}, O_D{e,d}] = sort(C_D{e,d});
        end
    end
    
    IX_N = cell(size(sleepStructure,2), size(ClusterRefsN,2));
    O_N = cell(size(sleepStructure,2), size(ClusterRefsN,2));
    
    
    for d= 1:size(wake_night_clusters,3)
        for e=1:size(sleepStructure,2)
            [IX_N{e,d}, O_N{e,d}] = sort(C_N{e,d});
        end
    end

    clear e d g
    
    
    %% before proceeding is best to make sure all the clusters are assigned in the correct order

%need to reassign the clusters so that 1=low activity and 5 = high
    %activity
        %O contains the cluster number and IX contains the values
            %the order is from low to high activity
 
     %first make new cell array to store these new assignments
     ClusterRefsD2= ClusterRefsD;
     ClusterRefsN2=ClusterRefsN;

    for e=1:size(sleepStructure,2) %every experiment
        for g=1:size(sleepStructure(e).geno.data,2) %every group
            for d=1:size(wake_day_clusters,3) %every day and combined
                for s=1:K(1) %every cluster
                    scrap = ClusterRefsD{e,g,d}==O_D{e,d}(s);
                    ClusterRefsD2{e,g,d}(scrap) = s;

                    scrap2= ClusterRefsN{e,g,d}==O_N{e,d}(s);
                    ClusterRefsN2{e,g,d}(scrap2) = s;

                    clear scrap scrap2     

                end 
            end
        end
    end
    clear e d g s
    
    %replace NaNs with zeros in ClusterRefsN and D so that sleep is in 
    %state space
    for e=1:size(sleepStructure,2)
       for g=1:size(sleepStructure(e).geno.data,2)
           for d=1:size(wake_night_clusters,3)
               %night first - index in sleep
               scrap = isnan(ClusterRefsN2{e,g,d});
               ClusterRefsN2{e,g,d}(scrap) =0;
               clear scrap

                %and do the same for day clusters
                scrap = isnan(ClusterRefsD2{e,g,d});
                ClusterRefsD2{e,g,d}(scrap) =0;
                clear scrap
                
                %add one to all the values in the matrix so that can 
            %include sleep bouts as index 1

                ClusterRefsN2{e,g,d} = ClusterRefsN2{e,g,d}+1;
                ClusterRefsD2{e,g,d} = ClusterRefsD2{e,g,d}+1;

           end
       end
    end
    clear e g d
    %% Determine the activity values for each cluster
    
    %first separate the wake_day and night

    for e=1:size(sleepStructure,2)

        for g=1:size(wake_day2,2)

            wake_day3 {e,g,1} = wake_day2{e,g}(:,:,1);
            wake_day3 {e,g,2} = wake_day2{e,g}(:,:,2);
            wake_day3{e,g,3} = vertcat(wake_day2{e,g}(:,:,1), wake_day2{e,g}(:,:,2));


            wake_night3 {e,g,1} = wake_night2{e,g}(:,:,1);
            wake_night3 {e,g,2} = wake_night2{e,g}(:,:,2);
            wake_night3{e,g,3} = vertcat(wake_night2{e,g}(:,:,1), wake_night2{e,g}(:,:,2));

        end 
    end

    %also make arrays with zeros in for sleep
    for e=1:size(sleepStructure,2)
       for g=1:size(wake_day3,2)

           for d=1:size(wake_day3,3)

               scrap = isnan(wake_day3{e,g,d});
               wake_day3{e,g,d}(scrap) = 0;
               clear scrap

               scrap2 = isnan(wake_night3{e,g,d});
               wake_night3{e,g,d}(scrap2) = 0;
               clear scrap2

           end
       end

    end


    %first do indexing to find corresponding activity and clusters

    clear scrap
    Cluster_valsN = cell(size(sleepStructure,2),size(sleepStructure(e).geno.data,2),...
        3);
    Cluster_valsD = cell(size(sleepStructure,2),size(sleepStructure(e).geno.data,2),...
        3);
    for e=1:size(sleepStructure,2) %every experiment

        for d=1:3 %every day and night and combined

            for g=1:size(sleepStructure(e).geno.data,2) %every genotype
                    for k = 1:K(1)+1 %every cluster     

                        scrap = ClusterRefsN2{e,g,d}==k; %find corresponding clusters  
                        scrap2 = ClusterRefsD2{e,g,d}==k;
                        
                        Cluster_valsN{e,g,k}(1:size(wake_night3{e,g,d}(scrap),1),d) = wake_night3{e,g,d}(scrap); %index activity values
                        Cluster_valsD{e,g,k}(1:size(wake_day3{e,g,d}(scrap2),1),d) = wake_day3{e,g,d}(scrap2);

                        clear scrap scrap2
                    end
            end
        end

    end
    
    %now need to find min and max values for each of the clusters
    mean_clustersD = cell(1,5);
    mean_clustersN = cell(1, 5);
    std_clustersD = cell(1, 5);
    std_clustersN = cell(1, 5);
    for e=1:size(sleepStructure,2)

        for g=1:size(Cluster_valsN,2)

            for d=3

                Cluster_valsD{e,g,k}(Cluster_valsD{e,g,k}==0)=NaN;
                Cluster_valsN{e,g,k}(Cluster_valsN{e,g,k}==0) = NaN;

                    for k=1:size(Cluster_valsN,3)
%                     mins_clustersN{e,k}(g,d) = min(Cluster_valsN{e,g,d,k});
%                     max_clustersN{e,k}(g,d) = max(Cluster_valsN{e,g,d,k});
                    mean_clustersN{k}(e,g) = nanmean(Cluster_valsN{e,g,k}(:,d));
                    std_clustersN{k}(e,g) = nanstd(Cluster_valsN{e,g,k}(:,d));

%                     mins_clustersD{e,k}(g,d) = min(Cluster_valsD{e,g,d,k});
%                     max_clustersD{e,k}(g,d) = max(Cluster_valsD{e,g,d,k});
                    mean_clustersD{k}(e,g) = nanmean(Cluster_valsD{e,g,k}(:,d));
                    std_clustersD{k}(e,g) = nanstd(Cluster_valsD{e,g,k}(:,d));
                    end
            end
        end
    end

    %find the mean and standard deviation for all experiments, each geno and every cluster
    for k=1:size(mean_clustersD,2) %every cluster

        for g=1:size(mean_clustersD{k},2)
            mean_allN(k,g) = nanmean(mean_clustersN{k}(:,g));
            mean_allD(k,g) = nanmean(mean_clustersD{k}(:,g));
            
            std_allN(k,g) = nanmean(std_clustersN{k}(:,g));
            std_allD(k,g) = nanmean(std_clustersD{k}(:,g));
            
        end
    end
    

% %             min_allN{g}(:,k) = min(cell2mat(mins_clustersN(g,k)))';
% %             max_allN{g}(:,k) = max(cell2mat(max_clustersN(g,k)))';
%             mean_allN{k} = nanmean(cell2mat(mean_clustersN(g,k)))';
%             std_allN {g}(:,k) = nanstd(cell2mat(std_clustersN(g,k)))';
% 
%             min_allD{g}(:,k) = min(cell2mat(mins_clustersD(g,k)))';
%             max_allD{g}(:,k) = max(cell2mat(max_clustersD(g,k)))';
%             mean_allD{g}(:,k) = nanmean(cell2mat(mean_clustersD(g,k)))';
%             std_allD {g}(:,k) = nanstd(cell2mat(std_clustersD(g,k)))';
% 
%         end
%             %replace zeros for sleep
%             scrap = isnan(min_allN{g});
%             min_allN{g}(scrap) = 0;
%             max_allN{g}(scrap) = 0;
%             mean_allN{g}(scrap) = 0;
%             std_allN{g}(scrap) = 0;
% 
%             min_allD{g}(scrap) = 0;
%             max_allD{g}(scrap) = 0;
%             mean_allD{g}(scrap) = 0;
%             std_allD{g}(scrap) = 0;
%             clear scrap
%     end
  %%  
    %save the mean cluster values
    states = {'state1' 'state2' 'state3'  'state4' 'state5'};
   
    delete(fullfile(saveDir, 'meanClusterActivityDay.xls'));
    delete(fullfile(saveDir, 'meanClusterActivityNight.xls'));
    for s=1:size(mean_clustersD,2)
        %every columns of sheet is genotype as designated by names
       writetable(array2table(mean_clustersD{s},'VariableNames', names), ...
           fullfile(saveDir, 'meanClusterActivityDay.xls'), 'sheet', states{s});
       writetable(array2table(mean_clustersN{s},'VariableNames', names), ...
           fullfile(saveDir, 'meanClusterActivityNight.xls'), 'sheet', states{s});    
    end
    
    %find percentage of time spent in each cluster
    for e=1:size(sleepStructure,2) %every experiment

        for g=1:size(sleepStructure(e).geno.data,2) %every genotype

            for d=1:size(ClusterRefsN2,3) %every day and combined

                for f=1:size(ClusterRefsN2{e,g,d},2);
                    for k=1:K(1)+1 %every cluster

                    percent_ClustersN {e,g,d} (k,f) = sum(ClusterRefsN2{e,g,d}(:,f)==k)/...
                       size(ClusterRefsN2{e,g,d},1); %make matrix - every cluster is a row, and every fish is a column

                    percent_ClustersD{e,g,d}(k,f) = sum(ClusterRefsD2{e,g,d}(:,f) ==k)/...
                       size(ClusterRefsD2{e,g,d},1);
                    end
                end

                percent_summaryN {e,d} (:,g) = nanmean(percent_ClustersN{e,g,d}')';

                percent_summaryD {e,d} (:,g) = nanmean(percent_ClustersD{e,g,d}')';

            end

        end

    end

    %vertcat to calculate means and std
    for g=1:size(names,2)
       cluster_meansD {g}= [];
       cluster_meansN {g} = [];
       for i=1:size(percent_summaryD,1)
            cluster_meansD {g} = [cluster_meansD{g} percent_summaryD{i,3}(:,g)];
            cluster_meansN{g} = [cluster_meansN{g} percent_summaryN{i,3}(:,g)];
       end
    end

    %write to excel
    for g = 1:size(names,2)
       xlswrite(fullfile(saveDir, 'ClusterPercentagesDay.xls'), cluster_meansD{g}, names{g});
       xlswrite(fullfile(saveDir, 'ClusterPercentagesNight.xls'), cluster_meansN{g}, names{g});
    end
    
    %now make a nice plot to show the activity for all the clusters
    txtD(1,:) = nanmean(cell2mat(cluster_meansD),2)*100';
    txtN (1,:)= nanmean(cell2mat(cluster_meansN),2)*100';
    
    txtD (2,:)=nanstd(cell2mat(cluster_meansD),[],2)*100';
    txtN(2,:) = nanstd(cell2mat(cluster_meansN), [],2)*100';
    
    pos (1,:) = mean_allD(:,1);
    pos(2,:) = mean_allN(:,1);
    
    figure;
    errorbar (mean_allD(:,1), std_allD(:,1), 'Linewidth', 2, 'color', 'b');
    hold on
    errorbar (mean_allN(:,1), std_allN(:,1), 'Linewidth', 2, 'color', 'k');
    for k=1:5
       text(k-0.25, pos(1,k)+1, strcat(num2str(txtD(1,k)), '+/-',...
           num2str(txtD(2,k))), 'color', 'b');
       text(k-0.25, pos(2,k)+0.5, strcat(num2str(txtN(1,k)), '+/-',...
           num2str(txtN(2,k))), 'color', 'k');
    end
    box off;
    ax=gca;
    ax.YMinorTick = 'on';
    ax.FontSize = 16;
    ax.XTick = [0:6];
    xlabel ('Cluster', 'Fontsize', 18);
    ylabel ('Activity (sec min^{-1})' , 'Fontsize', 18);
    legend ({'Day' 'Night'}, 'Fontsize', 20);
    print(gcf, fullfile(saveDir, 'ClusterTimeValues'), '-depsc');
    savefig(gcf, fullfile(saveDir, 'ClusterTimeValues.fig'));
    saveas(gcf, fullfile(saveDir, 'ClusterTimeValues'), 'tiff');
        
end
     